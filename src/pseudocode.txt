Ships:
length : num
Hits : num
Sunk : true/false ? 
Function addHit => this.hits += 1
isSunk() hits === length ? return true : return false


Gameboard:
array: 10x10
Place ship(starting coordinate ,length, vertical/horizontal) => substitute null in the coordinates ship object. 
Receive hit(x,y) => if(array[x][y]) => ship.addHit(), array [x][y] = "hit", return ship
else array[x][y] = "water" , return watera

allSunk(array.forEach(line) line.forEach(slot) if typeof slot === object return false)

Players:
two Players
Player has gameboard as a property
player.placeShip() triggers gameboard.placeShip()
player.receiveHit() triggers gameboard.receiveHit()
player.attack() triggers player.receiveHit()
player.win() console.log('win')

player.attack() {
  opponent.receiveHit()
  if(opponent.gameboard.allSunk){
    player.win()
  }
}
while(true) {
  player1 attack();
   if(gameboard2.allSunk) break
   player2 attack()
  if(gameboard1.allSunk) break
}

Create computer that fires randomly.


Colors: 
Grid borders: #002C66
Grid squares: #2389DA
Text: #FFFFFF
Main background: #303030
Header background: #3D3D3D
Red when ship is hit but not sunk: #D16060
Red when ship is sunk: #F82727
Grey boats: #808080
Grey boats border: #464646



  const placeShipRandom = function (length) {
    let x;
    let y;
    let isEmpty = false;
    let direction;
    const num = Math.round(Math.random());
    if (num === 0) {
      direction = 'horizontal';
    } else {
      direction = 'vertical';
    }
    while (isEmpty === false) {
      x = Math.floor(Math.random() * 10);
      y = Math.floor(Math.random() * 10);

      isEmpty = (function () {
        const array = [];
        const surroundingArray = [];

        if (direction === 'horizontal' && x + length > grid.length) {
          return false;
        }
        if (direction === 'vertical' && y + length >= grid[0].length) {
          return false;
        }

        array.push(grid[x][y]);
        if (direction === 'horizontal') {
          for (let i = 0; i < length; i += 1) {
            array.push(grid[x + i][y]);
          }
        } else {
          for (let i = 0; i < length; i += 1) {
            array.push(grid[x][y + i]);
          }
        }

        for (let i = -1; i <= length; i += 1) {
          const x1 = x + (direction === 'horizontal' ? i : 0);
          const y1 = y + (direction === 'horizontal' ? 0 : i);
          const x2 = x + (direction === 'horizontal' ? i : -1);
          const y2 = y + (direction === 'horizontal' ? -1 : i);
          const x3 = x + (direction === 'horizontal' ? i : 1);
          const y3 = y + (direction === 'horizontal' ? 1 : i);

          if (x1 >= 0 && x1 < grid.length && y1 >= 0 && y1 < grid[0].length) {
            surroundingArray.push(grid[x1][y1]);
          }
          if (x2 >= 0 && x2 < grid.length && y2 >= 0 && y2 < grid[0].length) {
            surroundingArray.push(grid[x2][y2]);
          }
          if (x3 >= 0 && x3 < grid.length && y3 >= 0 && y3 < grid[0].length) {
            surroundingArray.push(grid[x3][y3]);
          }
        }

        const empty = array.every(square => square === null);
        const surroundingEmpty = surroundingArray.every(square => square === null);

        return empty && surroundingEmpty;
      })();
    }
    const shipObj = Ship(length);
    if (direction === 'vertical') {
      for (let i = 0; i < shipObj.length; i += 1) grid[x][y + i] = shipObj;
    } else {
      for (let i = 0; i < shipObj.length; i += 1) grid[x + i][y] = shipObj;
    }
  };
