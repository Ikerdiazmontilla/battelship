Ships:
length : num
Hits : num
Sunk : true/false ? 
Function addHit => this.hits += 1
isSunk() hits === length ? return true : return false


Gameboard:
array: 10x10
Place ship(starting coordinate ,length, vertical/horizontal) => substitute null in the coordinates ship object. 
Receive hit(x,y) => if(array[x][y]) => ship.addHit(), array [x][y] = "hit", return ship
else array[x][y] = "water" , return watera

allSunk(array.forEach(line) line.forEach(slot) if typeof slot === object return false)

Players:
two Players
Player has gameboard as a property
player.placeShip() triggers gameboard.placeShip()
player.receiveHit() triggers gameboard.receiveHit()
player.attack() triggers player.receiveHit()
player.win() console.log('win')

player.attack() {
  opponent.receiveHit()
  if(opponent.gameboard.allSunk){
    player.win()
  }
}
while(true) {
  player1 attack();
   if(gameboard2.allSunk) break
   player2 attack()
  if(gameboard1.allSunk) break
}

Create computer that fires randomly.


Colors: 
Grid borders: #002C66
Grid squares: #2389DA
Text: #FFFFFF
Main background: #303030
Header background: #3D3D3D
Red when ship is hit but not sunk: #D16060
Red when ship is sunk: #F82727
Grey boats: #808080
Grey boats border: #464646



Uncouple PopulateGrid And populateEnemyGrid functions and cut repetition
Look claude for more improvementsr
Fix multiplayer




 const gridListeners = function () {
      const squares = document.querySelectorAll('#grid-place .square.empty');
      const onDrop = event => {
        event.preventDefault();
        const json = event.dataTransfer.getData('application/json');
        const object = JSON.parse(json);
        const { length } = object;
        const grid = document.querySelector('#grid-place');
        const column = event.currentTarget.parentNode;
        const clickedSquare = event.currentTarget;
        const indexY = Array.prototype.indexOf.call(column.children, clickedSquare);
        const indexX = Array.prototype.indexOf.call(grid.children, column);
        const { direction } = multiplayer;
        const playerGrid = player.getGrid();
        const isEmpty = (function () {
          const array = [];
          const surroundingArray = [];

          array.push(playerGrid[indexX][indexY]);
          if (direction === 'horizontal') {
            for (let i = 0; i < length; i += 1) {
              array.push(playerGrid[indexX + i][indexY]);
            }
          } else {
            for (let i = 0; i < length; i += 1) {
              array.push(playerGrid[indexX][indexY + i]);
            }
          }

          for (let i = -1; i <= length; i += 1) {
            const x1 = indexX + (direction === 'horizontal' ? i : 0);
            const y1 = indexY + (direction === 'horizontal' ? 0 : i);
            const x2 = indexX + (direction === 'horizontal' ? i : -1);
            const y2 = indexY + (direction === 'horizontal' ? -1 : i);
            const x3 = indexX + (direction === 'horizontal' ? i : 1);
            const y3 = indexY + (direction === 'horizontal' ? 1 : i);

            if (x1 >= 0 && x1 < playerGrid.length && y1 >= 0 && y1 < playerGrid[0].length) {
              surroundingArray.push(playerGrid[x1][y1]);
            }
            if (x2 >= 0 && x2 < playerGrid.length && y2 >= 0 && y2 < playerGrid[0].length) {
              surroundingArray.push(playerGrid[x2][y2]);
            }
            if (x3 >= 0 && x3 < playerGrid.length && y3 >= 0 && y3 < playerGrid[0].length) {
              surroundingArray.push(playerGrid[x3][y3]);
            }
          }

          const empty = array.every(square => square === null);
          const surroundingEmpty = surroundingArray.every(square => square === null);

          return empty && surroundingEmpty;
        })();

        if (isEmpty === false) {
          return;
        }
        player.placeShip([indexX, indexY], length, direction);
        multiplayer.populateGrid(player.getGrid(), true);
        const draggedBoat = document.getElementById(object.id);
        draggedBoat.removeEventListener('dragstart', onDrag);
        draggedBoat.draggable = false;
        draggedBoat.style.opacity = '0';
        gridListeners();
      };
      squares.forEach(square => {
        square.addEventListener('dragover', event => {
          event.preventDefault();
        });
        square.addEventListener('drop', onDrop);
      });
    };
    gridListeners();